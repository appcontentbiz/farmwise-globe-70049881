
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://phdxahmpqvobbrqqjbut.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBoZHhhaG1wcXZvYmJycXFqYnV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY3MzAyODgsImV4cCI6MjA1MjMwNjI4OH0.lVWfcAaigt8z5yskV8XLH_EhYJJiNQ9mz_5PTQKMBng";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Checks if Supabase is connected and can be reached
 * @returns Promise<boolean> indicating if Supabase is connected
 */
export const isSupabaseConnected = async (): Promise<boolean> => {
  try {
    // Simple health check by trying to access public schema version
    const { error } = await supabase.from('tracking_events').select('id').limit(1);
    
    // Check for specific connection errors
    if (error && (
      error.code === 'PGRST12' || // PostgreSQL is unavailable
      error.code === 'PGRST01' || // JWT expired
      error.message.includes('Failed to fetch')
    )) {
      console.warn("Supabase connection issue:", error.message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Error checking Supabase connection:", error);
    return false;
  }
};

/**
 * Format and handle common Supabase errors
 * @param error The error object from Supabase
 * @returns An object with formatted error details or null if not a known error
 */
export const handleSupabaseError = (error: any): { type: string; message: string; code?: string } | null => {
  if (!error) return null;

  // Extract error details
  const errorCode = error.code;
  const errorMessage = error.message || "Unknown error occurred";
  
  // Handle specific Supabase error codes
  if (errorCode === "PGRST301") {
    return {
      type: "row_not_found",
      message: "Record not found",
      code: errorCode
    };
  } else if (errorCode === "PGRST204") {
    return {
      type: "auth",
      message: "Access denied. You don't have permission to perform this action.",
      code: errorCode
    };
  } else if (errorCode === "23505") {
    return {
      type: "duplicate",
      message: "This record already exists.",
      code: errorCode
    };
  } else if (errorCode === "23503") {
    return {
      type: "foreign_key",
      message: "Referenced record not found or constraints violated.",
      code: errorCode
    };
  } else if (error.message?.includes("JWT")) {
    return {
      type: "auth",
      message: "Authentication error. Please sign in again.",
      code: "JWT_ERROR"
    };
  } else if (error.message?.includes("network")) {
    return {
      type: "network",
      message: "Network error. Please check your connection.",
      code: "NETWORK_ERROR"
    };
  }
  
  // Generic error fallback
  return {
    type: "unknown",
    message: errorMessage,
    code: errorCode
  };
};
